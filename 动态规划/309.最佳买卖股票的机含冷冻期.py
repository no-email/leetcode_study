'''
给定一个整数组price,其中price[i] 表示第i天的股票价格
设计一个算法计算出最大利润,在满足一下约束条件下,你可以尽可能地
完成更多的交易
1,卖出股票后,你无法在第二天买入股票(即冷冻期为1天)
'''

'''
动态规划
思路与算法
我们用f[i] 表示第i天之后的累计收益,根据题目描述,我们会有三种不同的状态
1、我们目前持有一支股票,对应的累计最大收益记为f[i][0]
2、我们目前不持有任何股票,并且处于冷冻期,对应的累计最大收益为f[i][1]
3、我们目前不持有任何股票,并且不处于冷冻期,对应的累计最大收益为f[i][2]
这里的处于冷冻期指的是在第i天结束之后的状态.也就是说:如果第i天结束后处于冷冻期
那么第i+1天无法买入股票

状态转移

第i天的状态会从第i-1天的状态转移而来,我们也可以不进行任何操作,此时第i天的
状态就等同于第i-1天的状态,

对于f[i][0]
我们目前持有这一只股票可以是第i-1天就持有的,对应的状态为f[i-1][0]
或者第i天买入的,那么第i-1天就不能持有股票并且不处于冷冻期中,对应的状态即为f[i-1][2]
加上买入股票的负收益prices[i]因此状态转移方程为:
f[i][0] = max(f[i-1][0],f[i-1][2] - prices[i])

对于f[i][1]
我们在第i天结束后处于冷冻期的原因是在当天卖出了股票,那么第i-1天时我们必须
持有一支股票,对应的状态为f[i-1][0]加上卖出股票的正收益prices[i].因此状态转移方程为:
f[i][1] = f[i-1][0] + prices[i]

对于f[i][2]
我们在第i天结束后不持有任何股票且不处于冷冻期,说明当天没有进行任何操作,即第i-1天时不持有股票
如果处于冷冻期,对应的状态为f[i-1][1];如果不处于冷冻期,对应的状态为f[i-1][2]因此状态转移方程为:
f[i][2] = max(f[i-1][1],f[i-1][2])


最终我们获得的最大收益即可以为
max(f[n-1][1],f[n-1][2],f[n-1][0])
但是最有一天持有股票没有任何意义即最终答案为
max(f[n-1][1],f[n-1][2])

初始条件
f[0][0] = -prices[0]
f[0][1] = 0
f[0][2] = 0
'''
def maxprofit(prices):
    if not prices:
        return 0
    n = len(prices)
    f = [[-prices[0],0,0] +[[0]*3 for _ in range(n-1)]]
    for i in range(1,n):
        f[i][0] = max(f[i-1][0], f[i-1][2] - prices[i])
        f[i][1] = f[i-1][0] + prices[i]
        f[i][2] = max(f[i-1][1], f[i-1][2])
    return max(f[n-1][1],f[n-1][2])
